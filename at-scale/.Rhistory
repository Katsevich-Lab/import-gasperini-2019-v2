cell_barcodes_in_use <- gsub('.{9}$', '', cell_barcodes_in_use_long)
gRNA_barcodes_in_use <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_grna_groups.at_scale.txt"),
col_names = c("group_name", "gRNA_barcode"), col_types = "cc")
gRNA_counts <- readr::read_tsv(paste0(raw_data_dir, "all_libraries.gRNAcaptured.aggregated.txt"),
col_names = TRUE,
col_types = "cccc") %>% dplyr::rename(cell_barcode = cell, gRNA_barcode = barcode)
# keep rows with cells in use, gRNA barcode in use, and nonzero UMI counts
gRNA_counts_sub <- gRNA_counts %>% dplyr::filter(umi_count > 0,
cell_barcode %in% cell_barcodes_in_use,
gRNA_barcode %in% gRNA_barcodes_in_use$gRNA_barcode)
# keep rows with cells in use, gRNA barcode in use, and nonzero UMI counts
gRNA_counts_sub <- gRNA_counts %>% dplyr::filter(umi_count > 0,
cell_barcode %in% cell_barcodes_in_use,
gRNA_barcode %in% gRNA_barcodes_in_use$gRNA_barcode)
# assign integer labels to the cell_barcodes and gRNA_barcodes
cell_idxs <- match(x = gRNA_counts_sub$cell_barcode, table = cell_barcodes_in_use)
gRNA_idxs <- match(x = gRNA_counts_sub$gRNA_barcode, table = gRNA_barcodes_in_use$gRNA_barcode)
m <- Matrix::sparseMatrix(i = gRNA_idxs,
j = cell_idxs,
x = as.integer(gRNA_counts_sub$umi_count),
dims = c(length(unique(gRNA_barcodes_in_use$gRNA_barcode)), length(unique(cell_barcodes_in_use))),
repr = "T")
row.names(m) <- gRNA_barcodes_in_use$gRNA_barcode
colnames(m) <- cell_barcodes_in_use_long
# save the count matrix to the intermediate file directory
saveRDS(object = m, file = paste0(intermediate_data_dir, "gRNA_count_matrix.rds"))
9
10
library(ondisc)
###########################
# 0. Load packages; set fps
###########################
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_DATA_DIR"), "at-scale/")
# create the processed data directories
processed_data_dir <- paste0(gasp_offsite, "processed/")
processed_data_dir_gene <- paste0(processed_data_dir, "gene/")
processed_data_dir_grouped <- paste0(processed_data_dir, "gRNA_grouped/")
processed_data_dir_ungrouped <- paste0(processed_data_dir, "gRNA_ungrouped/")
processed_data_dir_multimodal <- paste0(processed_data_dir, "multimodal/")
dirs_to_create <- c(processed_data_dir_gene,
processed_data_dir_grouped,
processed_data_dir_ungrouped,
processed_data_dir_multimodal)
for (dir in dirs_to_create) {
if (!dir.exists(dir)) dir.create(path = dir, recursive = TRUE)
}
# set raw directories
raw_data_dir <- paste0(gasp_offsite, "raw/")
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
# load packages
library(magrittr)
library(ondisc)
gasp_offsite
processed_data_dir
processed_data_dir_gene
paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm")
# gene modality
read_odm(odm_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_metadata.rds"))
# gene modality
read_odm(odm_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_metadata.rds"))
processed_data_dir_ungrouped
processed_data_dir_ungrouped
# gRNA modality
read_odm(odm_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm"),
metadata_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_metadata_ungrouped.rds"))
# gene modality
gene_modality <- read_odm(odm_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_metadata.rds"))
# gRNA modality
gRNA_modality <- read_odm(odm_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm"),
metadata_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_metadata_ungrouped.rds"))
gene_modality
gRNA_modality
gRNA_modality |> get_feature_covariates() |> head()
gene_modality |> mutate_feature_covariates(NULL)
# create the multimodal ODM
mm_odm <- multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality))
mm_odm
mm_odm |> get_cell_covariates() |> head()
# create the multimodal ODM
mm_odm <- multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality)) |>
dplyr::mutate_cell_covariates(lg_gene_n_nonzero = log(gene_n_nonzero),
gene_n_nonzero = NULL,
lg_gene_n_umis = log(gene_n_umis),
gene_n_umis = NULL,
lg_gRNA_n_nonzero = log(gRNA_n_nonzero),
gRNA_n_nonzero = NULL,
lg_gRNA_n_umis = log(gRNA_n_umis),
gRNA_n_umis = NULL)
# create the multimodal ODM
mm_odm <- multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality)) |>
ondisc::mutate_cell_covariates(lg_gene_n_nonzero = log(gene_n_nonzero),
gene_n_nonzero = NULL,
lg_gene_n_umis = log(gene_n_umis),
gene_n_umis = NULL,
lg_gRNA_n_nonzero = log(gRNA_n_nonzero),
gRNA_n_nonzero = NULL,
lg_gRNA_n_umis = log(gRNA_n_umis),
gRNA_n_umis = NULL)
mm_odm
mm_odm |> get_cell_covariates() |> head()
# create the multimodal ODM
mm_odm <- multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality)) |>
ondisc::mutate_cell_covariates(lg_gene_n_nonzero = log(gene_n_nonzero),
gene_n_nonzero = NULL,
lg_gene_n_umis = log(gene_n_umis),
gene_n_umis = NULL,
lg_gRNA_n_nonzero = log(gRNA_n_nonzero),
gRNA_n_nonzero = NULL,
lg_gRNA_n_umis = log(gRNA_n_umis),
gRNA_n_umis = NULL)
mm_odm |> get_cell_covariates() |> dplyr::pull(lg_gene_n_umis) |> is.na() |> any()
mm_odm |> get_cell_covariates() |> dplyr::pull(lg_gene_n_umis) |> min()
multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality))
multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality))
multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality)) |> ondisc::get_cell_covariates() |> head()
multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality)) |> ondisc::get_cell_covariates() |> dplyr::pull(gene_n_umis) |> min()
multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality)) |> ondisc::get_cell_covariates() |> dplyr::pull(gRNA_n_umis) |> min()
mm_odm
mm_odm |> ondisc::get_cell_covariates() |> head()
# create the multimodal ODM
mm_odm <- multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality))
mm_odm |> ondisc::get_cell_covariates() |> head()
# restrict attention to cells with a positive number of gRNA and gene UMIs
mm_odm |> ondisc::get_cell_covariates() |>
dplyr::summarize(ok_cells = gene_n_umis > 0 & gRNA_n_umis > 0)
# restrict attention to cells with a positive number of gRNA and gene UMIs
mm_odm |> ondisc::get_cell_covariates() |>
dplyr::summarize(ok_cells = gene_n_umis > 0 & gRNA_n_umis > 0) |> mean()
# restrict attention to cells with a positive number of gRNA and gene UMIs
mm_odm |> ondisc::get_cell_covariates() |>
dplyr::summarize(ok_cells = gene_n_umis > 0 & gRNA_n_umis > 0) |> dplyr::pull() |> mean()
# restrict attention to cells with a positive number of gRNA and gene UMIs
ok_cells <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::summarize(ok_cells = gene_n_umis > 0 & gRNA_n_umis > 0) |>
dplyr::pull()
ok_cells
mean(ok_cell;s)
mean(ok_cells)
ok_cells
mean(ok_cells)
ok_cells
mm_odm_sub <- mm_odm[,ok_cells]
mm_odm_sub
mm_odm
# transform the covariates
mm_odm_sub <- multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality)) |>
ondisc::mutate_cell_covariates(lg_gene_n_nonzero = log(gene_n_nonzero),
gene_n_nonzero = NULL,
lg_gene_n_umis = log(gene_n_umis),
gene_n_umis = NULL,
lg_gRNA_n_nonzero = log(gRNA_n_nonzero),
gRNA_n_nonzero = NULL,
lg_gRNA_n_umis = log(gRNA_n_umis),
gRNA_n_umis = NULL)
mm_odm_sub
# transform the covariates
mm_odm_sub <- mm_odm_sub |>
ondisc::mutate_cell_covariates(lg_gene_n_nonzero = log(gene_n_nonzero),
gene_n_nonzero = NULL,
lg_gene_n_umis = log(gene_n_umis),
gene_n_umis = NULL,
lg_gRNA_n_nonzero = log(gRNA_n_nonzero),
gRNA_n_nonzero = NULL,
lg_gRNA_n_umis = log(gRNA_n_umis),
gRNA_n_umis = NULL)
mm_odm_sub
mm_odm
sum(ok_cells)
mm_odm_sub <- mm_odm[,ok_cells]
mm_odm_sub |>
ondisc::mutate_cell_covariates(lg_gene_n_nonzero = log(gene_n_nonzero),
gene_n_nonzero = NULL,
lg_gene_n_umis = log(gene_n_umis),
gene_n_umis = NULL,
lg_gRNA_n_nonzero = log(gRNA_n_nonzero),
gRNA_n_nonzero = NULL,
lg_gRNA_n_umis = log(gRNA_n_umis),
gRNA_n_umis = NULL)
# transform the covariates
mm_odm_sub <- mm_odm_sub |>
ondisc::mutate_cell_covariates(lg_gene_n_nonzero = log(gene_n_nonzero),
gene_n_nonzero = NULL,
lg_gene_n_umis = log(gene_n_umis),
gene_n_umis = NULL,
lg_gRNA_n_nonzero = log(gRNA_n_nonzero),
gRNA_n_nonzero = NULL,
lg_gRNA_n_umis = log(gRNA_n_umis),
gRNA_n_umis = NULL)
mm_odm_sub |> get_cell_covariates() |> head()
mm_odm_sub@modalities$gene[[10,]]
mm_odm_sub@modalities$gene[[100,]]
processed_data_dir_multimodal
processed_data_dir_multimodal
# save the multimodal ODM
save_multimodal_odm(multimodal_odm = mm_odm_sub,
multimodal_metadata_fp = paste0(processed_data_dir_multimodal, "multimodal_metadata.rds"))
paste0(processed_data_dir_multimodal, "multimodal_metadata.rds")
c(paste0(processed_data_dir_gene, "gasp_scale_gene_metadata.rds"),
paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_metadata_ungrouped.rds"))
mm_odm <- read_multimodal_odm(odm_fps = c(paste0(processed_data_dir_gene, "gasp_scale_gene_metadata.rds"),
paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_metadata_ungrouped.rds")),
multimodal_metadata_fp = paste0(processed_data_dir_multimodal, "multimodal_metadata.rds"))
mm_odm <- read_multimodal_odm(odm_fps = c(paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm"),
paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm")),
multimodal_metadata_fp = paste0(processed_data_dir_multimodal, "multimodal_metadata.rds"))
mm_odm
mm_odm <- read_multimodal_odm(odm_fps = c(paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm"),
paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm")),
multimodal_metadata_fp = paste0(processed_data_dir_multimodal, "multimodal_metadata.rds"))
mm_odm <- read_multimodal_odm(odm_fps = c(paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm"),
paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm")),
multimodal_metadata_fp = paste0(processed_data_dir_multimodal, "multimodal_metadata.rds")) |> system.time()
mm_odm
mm_odm <- read_multimodal_odm(odm_fps = c(paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm"),
paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm")),
multimodal_metadata_fp = paste0(processed_data_dir_multimodal, "multimodal_metadata.rds"))
mm_odm
mm_odm@modalities$gene[[1001,]]
mm_odm@modalities$gene[[1003,]]
mm_odm
mm_odm@modalities$gRNA
mm_odm@modalities$gRNA[[10,]]
mm_odm@modalities$gRNA |> get_feature_covariates() |> head()
load_thresholded_and_grouped_gRNA(covariate_odm = mm_odm@modalities$gRNA, gRNA_group = "MTRNR2L8_TSS", threshold = 5)
mm_odm
mm_odm
mm_odm@global_cell_covariates |> head()
pryr
install.packages("pryr")
pryr::object_size(mm_odm_sub)
pryr::object_size(mm_odm_sub) * 100
pryr::object_size(mm_odm_sub) * 1e-6
mm_odm_sub
mm_odm_sub
mm_odm_sub
9
mm_odm_sub
mm_odm_sub |> get_cell_covariates() |> head()
mm_odm_sub
mm_odm_sub@modalities$gene[[1001,]]
mm_odm_sub@modalities$gene[[200,]]
mm_odm_sub@modalities$gene[[2000,]]
mm_odm_sub@modalities$gene[[,2000]]
mm_odm_sub
###########################
# 0. Load packages; set fps
###########################
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_DATA_DIR"), "at-scale/")
# create the processed data directories
processed_data_dir <- paste0(gasp_offsite, "processed/")
processed_data_dir_gene <- paste0(processed_data_dir, "gene/")
processed_data_dir_grouped <- paste0(processed_data_dir, "gRNA_grouped/")
processed_data_dir_ungrouped <- paste0(processed_data_dir, "gRNA_ungrouped/")
processed_data_dir_multimodal <- paste0(processed_data_dir, "multimodal/")
dirs_to_create <- c(processed_data_dir_gene,
processed_data_dir_grouped,
processed_data_dir_ungrouped,
processed_data_dir_multimodal)
for (dir in dirs_to_create) {
if (!dir.exists(dir)) dir.create(path = dir, recursive = TRUE)
}
# set raw directories
raw_data_dir <- paste0(gasp_offsite, "raw/")
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
# load packages
library(magrittr)
library(ondisc)
################
# Multimodal ODM
################
# gene modality
gene_modality <- read_odm(odm_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_metadata.rds"))
# gRNA modality
gRNA_modality <- read_odm(odm_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm"),
metadata_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_metadata_ungrouped.rds"))
# create the multimodal ODM
mm_odm <- multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality))
################
# Multimodal ODM
################
# gene modality
gene_modality <- read_odm(odm_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(processed_data_dir_gene, "gasp_scale_gene_metadata.rds"))
# gRNA modality
gRNA_modality <- read_odm(odm_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm"),
metadata_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_metadata_ungrouped.rds"))
gene_modality
gene_modality
# gRNA modality
gRNA_modality <- read_odm(odm_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm"),
metadata_fp = paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_metadata_ungrouped.rds"))
gRNA_modality
# create the multimodal ODM
mm_odm <- multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(gene = gene_modality,
gRNA = gRNA_modality))
mm_odm
mm_odm |> get_modality("gene")
mm_odm |> get_modality("gRNA")
mm_odm |> get_cell_covariates() |> head()
mm_odm
mm_odm |> ondisc::get_cell_covariates()
# restrict attention to cells with a positive number of gRNA and gene UMIs
ok_cells <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::summarize(ok_cells = gene_n_umis > 0 & gRNA_n_umis > 0) |>
dplyr::pull()
head(ok_cells)
mean(ok_cells)
mm_odm_sub <- mm_odm[,ok_cells]
mm_odm
mm_odm_sub <- mm_odm[,ok_cells]
mm_odm_sub
# save the multimodal ODM
save_multimodal_odm(multimodal_odm = mm_odm_sub,
multimodal_metadata_fp = paste0(processed_data_dir_multimodal, "multimodal_metadata.rds"))
###########################
# 0. Load packages; set fps
###########################
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_DATA_DIR"), "at-scale/")
# create the processed data directories
processed_data_dir <- paste0(gasp_offsite, "processed/")
processed_data_dir_gene <- paste0(processed_data_dir, "gene/")
processed_data_dir_grouped <- paste0(processed_data_dir, "gRNA_grouped/")
processed_data_dir_ungrouped <- paste0(processed_data_dir, "gRNA_ungrouped/")
processed_data_dir_multimodal <- paste0(processed_data_dir, "multimodal/")
processed_data_dir_ungrouped_assignment <- paste0(processed_data_dir, "gRNA_assignment/")
dirs_to_create <- c(processed_data_dir_gene,
processed_data_dir_grouped,
processed_data_dir_ungrouped,
processed_data_dir_multimodal,
processed_data_dir_ungrouped_assignment)
for (dir in dirs_to_create) {
if (!dir.exists(dir)) dir.create(path = dir, recursive = TRUE)
}
# set raw directories
raw_data_dir <- paste0(gasp_offsite, "raw/")
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
# load packages
library(magrittr)
library(ondisc)
###########################
# 1. gene expression matrix
###########################
# gene count matrix
mtx_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.exprs.mtx")
barcodes_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.cells.txt")
gene_ids_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.genes.txt")
odm_fp <- paste0(processed_data_dir_gene, "gasp_scale_gene_expressions.odm")
metadata_fp <- paste0(processed_data_dir_gene, "gasp_scale_gene_metadata.rds")
##################################
# 2. gRNA count matrix (ungrouped)
##################################
# next, load the gRNA count matrix. Write the backing .odm file and metadata file to disk.
odm_fp <- paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_counts_ungrouped.odm")
metadata_fp <- paste0(processed_data_dir_ungrouped, "gasp_scale_gRNA_metadata_ungrouped.rds")
gRNA_count_matrix <- readRDS(paste0(intermediate_data_dir, "gRNA_count_matrix.rds"))
gRNA_groups_df <- readr::read_tsv(file = paste0(raw_data_dir,
"GSE120861_grna_groups.at_scale.txt"),
col_types = "cc", col_names = c("gRNA_group", "barcodes"))
tab <- table(gRNA_groups_df$gRNA_group)
# confirm that ordering of gRNA groups matches that of barcodes
identical(row.names(gRNA_count_matrix), gRNA_groups_df$barcodes)
cell_barcodes <- colnames(gRNA_count_matrix)
# create the gRNA odm
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_count_matrix,
barcodes = cell_barcodes,
features_df = gRNA_groups_df |> dplyr::select(barcodes),
odm_fp = odm_fp,
metadata_fp = metadata_fp)
# modify the feature covariates: remove coefficient of variation (no need here), but add gRNA_group column
gRNA_odm <- gRNA_odm %>%
mutate_feature_covariates(coef_of_variation = NULL,
gRNA_group = gRNA_groups_df$gRNA_group)
# overwrite metadata file
save_odm(gRNA_odm, metadata_fp)
#########################################
# gRNA assignment matrix (threshold at 5)
#########################################
gRNA_assign_matrix <- gRNA_count_matrix >= 5
odm_fp <- paste0(processed_data_dir_ungrouped_assignment, "gasp_scale_gRNA_assignments_ungrouped.odm")
metadata_fp <- paste0(processed_data_dir_ungrouped_assignment, "gasp_scale_gRNA_metadata_ungrouped.rds")
gRNA_odm_assign <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_assign_matrix,
barcodes = cell_barcodes,
features_df = gRNA_groups_df |> dplyr::select(barcodes),
odm_fp = odm_fp,
metadata_fp = metadata_fp)
gRNA_assign_matrix
class(gRNA_assign_matrix)
gRNA_odm_assign <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_assign_matrix,
barcodes = cell_barcodes,
features_df = gRNA_groups_df |> dplyr::select(barcodes),
odm_fp = odm_fp,
metadata_fp = metadata_fp)
gRNA_assign_matrix
#########################################
# gRNA assignment matrix (threshold at 5)
#########################################
gRNA_assign_matrix <- as.matrix(gRNA_count_matrix >= 5)
odm_fp <- paste0(processed_data_dir_ungrouped_assignment, "gasp_scale_gRNA_assignments_ungrouped.odm")
metadata_fp <- paste0(processed_data_dir_ungrouped_assignment, "gasp_scale_gRNA_metadata_ungrouped.rds")
gRNA_odm_assign <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_assign_matrix,
barcodes = cell_barcodes,
features_df = gRNA_groups_df |> dplyr::select(barcodes),
odm_fp = odm_fp,
metadata_fp = metadata_fp)
create_ondisc_matrix_from_R_matrix
gRNA_odm_assign
#########################################
# gRNA assignment matrix (threshold at 5)
#########################################
gRNA_assign_matrix <- gRNA_count_matrix >= 5
gRNA_assign_matrix
gRNA_assign_matrix@x
gRNA_assign_matrix@x |> length()
gRNA_assign_matrix
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_DATA_DIR_V2"), "at-scale/")
gasp_offsite
# load R.utils; increase timeout to 5 hours
library(R.utils)
options(timeout = 5 * 60 * 60)
# create raw directory
raw_data_dir_gasp <- paste0(gasp_offsite, "raw")
if (!dir.exists(raw_data_dir_gasp)) dir.create(path = raw_data_dir_gasp, recursive = TRUE)
# URL of data
remote <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE120861&format=file&file="
# Gasperini et al results -- stores the naive NB p-values for all tested gRNA-gene pairs
all_deg_results_filename <- "GSE120861_all_deg_results.at_scale.txt"
# names of genes -- ordered gene IDs for use in conjunction with expression mtx file
genes_filename <- "GSE120861_at_scale_screen.genes.txt"
# names of cells -- cell barcodes for use in conjunction with expression mtx file
cells_filename <- "GSE120861_at_scale_screen.cells.txt"
# all (gRNA, gene) pairs
gRNAgroup_pair_table_filename <- "GSE120861_gene_gRNAgroup_pair_table.at_scale.txt"
# list of gRNA groups used
gRNA_groups_filename <- "GSE120861_grna_groups.at_scale.txt"
# monocle Cell Data Set object with binary gRNA data
cds_filename <- "GSE120861_at_scale_screen.cds.rds"
# gene expression matrix in mtx format
expression_filename <- "GSE120861_at_scale_screen.exprs.mtx"
# cell phenotype data
cell_phenodata_filename <- "GSE120861_at_scale_screen.phenoData.txt"
# list of files to download
filenames <- c(all_deg_results_filename,
genes_filename,
cells_filename,
cds_filename,
expression_filename,
gRNAgroup_pair_table_filename,
gRNA_groups_filename,
cell_phenodata_filename)
if (!dir.exists(raw_data_dir_gasp)) dir.create(path = raw_data_dir_gasp, recursive = TRUE)
raw_data_dir_gasp
gasp_offsite
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
gasp_offsite
# load R.utils; increase timeout to 5 hours
library(R.utils)
options(timeout = 5 * 60 * 60)
# create raw directory
raw_data_dir_gasp <- paste0(gasp_offsite, "raw")
if (!dir.exists(raw_data_dir_gasp)) dir.create(path = raw_data_dir_gasp, recursive = TRUE)
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
gasp_offsite
# create the intermediate data directory; set raw directory
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
if (!dir.exists(intermediate_data_dir)) dir.create(path = intermediate_data_dir, recursive = TRUE)
raw_data_dir <- paste0(gasp_offsite, "raw/")
# Obtain binary gRNA matrix and cell metadata from monocole object
library(monocle)
library(magrittr)
monocle_obj <- readRDS(paste0(raw_data_dir, "/GSE120861_at_scale_screen.cds.rds"))
cell_metadata <- pData(monocle_obj)
rm(monocle_obj); gc()
covariates_cols <- 1:18
gRNA_cols <- 19:ncol(cell_metadata)
gRNA_indicators <- cell_metadata[,gRNA_cols]
cell_covariates <- cell_metadata[,covariates_cols]
gRNA_indicators
class(gRNA_indicators)
# save the gRNA indicators and cell covariates
saveRDS(gRNA_indicators, paste0(intermediate_data_dir, "gRNA_indicators.rds"))
saveRDS(cell_covariates, paste0(intermediate_data_dir, "cell_covariates.rds"))
9
9
# load the gRNA "groups" at scale and gRNA count matrix
cell_barcodes_in_use_long <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_at_scale_screen.cells.txt"),
col_names = FALSE, col_types = "c") %>% dplyr::pull()
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
# create the intermediate data directory; set raw directory
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")

# list of gRNA groups used
gRNA_groups_filename <- "GSE120861_grna_groups.at_scale.txt"
# monocle Cell Data Set object with binary gRNA data
cds_filename <- "GSE120861_at_scale_screen.cds.rds"
# gene expression matrix in mtx format
expression_filename <- "GSE120861_at_scale_screen.exprs.mtx"
# cell phenotype data
cell_phenodata_filename <- "GSE120861_at_scale_screen.phenoData.txt"
# list of files to download
filenames <- c(all_deg_results_filename,
genes_filename,
cells_filename,
cds_filename,
expression_filename,
gRNAgroup_pair_table_filename,
gRNA_groups_filename,
cell_phenodata_filename)
if (!dir.exists(raw_data_dir_gasp)) dir.create(path = raw_data_dir_gasp, recursive = TRUE)
raw_data_dir_gasp
gasp_offsite
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
gasp_offsite
# load R.utils; increase timeout to 5 hours
library(R.utils)
options(timeout = 5 * 60 * 60)
# create raw directory
raw_data_dir_gasp <- paste0(gasp_offsite, "raw")
if (!dir.exists(raw_data_dir_gasp)) dir.create(path = raw_data_dir_gasp, recursive = TRUE)
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
gasp_offsite
# create the intermediate data directory; set raw directory
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
if (!dir.exists(intermediate_data_dir)) dir.create(path = intermediate_data_dir, recursive = TRUE)
raw_data_dir <- paste0(gasp_offsite, "raw/")
# Obtain binary gRNA matrix and cell metadata from monocole object
library(monocle)
library(magrittr)
monocle_obj <- readRDS(paste0(raw_data_dir, "/GSE120861_at_scale_screen.cds.rds"))
cell_metadata <- pData(monocle_obj)
rm(monocle_obj); gc()
covariates_cols <- 1:18
gRNA_cols <- 19:ncol(cell_metadata)
gRNA_indicators <- cell_metadata[,gRNA_cols]
cell_covariates <- cell_metadata[,covariates_cols]
gRNA_indicators
class(gRNA_indicators)
# save the gRNA indicators and cell covariates
saveRDS(gRNA_indicators, paste0(intermediate_data_dir, "gRNA_indicators.rds"))
saveRDS(cell_covariates, paste0(intermediate_data_dir, "cell_covariates.rds"))
9
9
# load the gRNA "groups" at scale and gRNA count matrix
cell_barcodes_in_use_long <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_at_scale_screen.cells.txt"),
col_names = FALSE, col_types = "c") %>% dplyr::pull()
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
# create the intermediate data directory; set raw directory
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
###########################
# 0. Load packages; set fps
###########################
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
processed_data_dir <- paste0(gasp_offsite, "processed/")
processed_gene_dir <- paste0(processed_data_dir, "gene/")
processed_gRNA_expression_dir <- paste0(processed_data_dir, "grna_expression/")
processed_gRNA_assignment_dir <- paste0(processed_data_dir, "grna_assignment/")
dirs_to_create <- c(processed_data_dir, processed_gene_dir,
processed_gRNA_expression_dir, processed_gRNA_assignment_dir)
for (dir in dirs_to_create) {
if (!dir.exists(dir)) dir.create(path = dir, recursive = TRUE)
}
# set raw directories
raw_data_dir <- paste0(gasp_offsite, "raw/")
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
# load packages
library(magrittr)
library(ondisc)
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
# create the intermediate data directory; set raw directory
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
if (!dir.exists(intermediate_data_dir)) dir.create(path = intermediate_data_dir, recursive = TRUE)
raw_data_dir <- paste0(gasp_offsite, "raw/")
# Obtain binary grna matrix and cell metadata from monocole object
library(monocle)
library(magrittr)
monocle_obj <- readRDS(paste0(raw_data_dir, "/GSE120861_at_scale_screen.cds.rds"))
cell_metadata <- pData(monocle_obj)
rm(monocle_obj); gc()
covariates_cols <- 1:18
cell_covariates <- cell_metadata[,covariates_cols]
# save the cell covariates
saveRDS(cell_covariates, paste0(intermediate_data_dir, "cell_covariates.rds"))
# load the grna "groups" at scale and grna count matrix
cell_barcodes_in_use_long <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_at_scale_screen.cells.txt"),
col_names = FALSE, col_types = "c") %>% dplyr::pull()
# all cell barcodes have 32 characters; strip the last 9
cell_barcodes_in_use <- gsub('.{9}$', '', cell_barcodes_in_use_long)
grna_barcodes_in_use <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_grna_groups.at_scale.txt"),
col_names = c("group_name", "grna_barcode"), col_types = "cc")
grna_counts <- readr::read_tsv(paste0(raw_data_dir, "all_libraries.gRNAcaptured.aggregated.txt"),
col_names = TRUE,
col_types = "cccc") %>% dplyr::rename(cell_barcode = cell, grna_barcode = barcode)
# keep rows with cells in use, grna barcode in use, and nonzero UMI counts
grna_counts_sub <- grna_counts %>% dplyr::filter(umi_count > 0,
cell_barcode %in% cell_barcodes_in_use,
grna_barcode %in% grna_barcodes_in_use$grna_barcode)
# assign integer labels to the cell_barcodes and grna_barcodes
cell_idxs <- match(x = grna_counts_sub$cell_barcode, table = cell_barcodes_in_use)
grna_idxs <- match(x = grna_counts_sub$grna_barcode, table = grna_barcodes_in_use$grna_barcode)
m <- Matrix::sparseMatrix(i = grna_idxs,
j = cell_idxs,
x = as.integer(grna_counts_sub$umi_count),
dims = c(length(unique(grna_barcodes_in_use$grna_barcode)), length(unique(cell_barcodes_in_use))),
repr = "T")
row.names(m) <- grna_barcodes_in_use$grna_barcode
colnames(m) <- cell_barcodes_in_use_long
# save the count matrix to the intermediate file directory
saveRDS(object = m, file = paste0(intermediate_data_dir, "grna_count_matrix.rds"))
rm(grna_counts, grna_counts_sub)
# create the data frame of grna feature covariates
grna_id_to_group_df <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_grna_groups.at_scale.txt"),
col_types = "cc", col_names = c("grna_group", "barcode"))
grna_result_table <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_all_deg_results.at_scale.txt"))
grna_group_to_target_df <- grna_result_table |>
dplyr::select(grna_group, target_site.chr, target_site.start, target_site.stop, target_type = site_type) |>
dplyr::distinct() |>
dplyr::mutate(target = paste0(target_site.chr, ":", target_site.start, "-", target_site.stop),
target_site.chr  = NULL, target_site.start = NULL, target_site.stop = NULL) |>
dplyr::filter(target_type != "TSS") |>
dplyr::mutate(target_type = forcats::fct_recode(target_type, gene_tss = "selfTSS",
candidate_enhancer = "DHS",
known_enhancer = "positive_ctrl",
"non-targeting" = "NTC"),
target = ifelse(target_type != "non-targeting", target, "non-targeting"))
# create the data frame of grna feature covariates
grna_id_to_group_df <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_grna_groups.at_scale.txt"),
col_types = "cc", col_names = c("grna_group", "barcode"))
grna_result_table <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_all_deg_results.at_scale.txt"))
head(grna_result_table)
grna_group_to_target_df <- grna_result_table |>
dplyr::select(gRNA_group, target_site.chr, target_site.start, target_site.stop, target_type = site_type) |>
dplyr::distinct() |>
dplyr::mutate(target = paste0(target_site.chr, ":", target_site.start, "-", target_site.stop),
target_site.chr  = NULL, target_site.start = NULL, target_site.stop = NULL) |>
dplyr::filter(target_type != "TSS") |>
dplyr::mutate(target_type = forcats::fct_recode(target_type, gene_tss = "selfTSS",
candidate_enhancer = "DHS",
known_enhancer = "positive_ctrl",
"non-targeting" = "NTC"),
target = ifelse(target_type != "non-targeting", target, "non-targeting"))
pos_control_grna_group_to_target_gene_df <- grna_result_table |>
dplyr::filter(site_type == "selfTSS") |>
dplyr::pull(pairs4merge) |>
strsplit(":") |>
do.call(what = rbind, args = _) |>
as.data.frame() |>
setNames(c("grna_group", "target_gene"))
# perform a join operation to create a data frame with columns grna ID (barcode), target (the chromosomal position that a grna targets), target_type, pos_control_gene (for positive controls, the targeted gene), and grna_group
grna_group_tbl <- dplyr::left_join(grna_group_to_target_df, pos_control_grna_group_to_target_gene_df, by = "grna_group")
head(grna_group_to_target_df)
head(pos_control_grna_group_to_target_gene_df)
head(grna_group_to_target_df)
# create the data frame of grna feature covariates
grna_id_to_group_df <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_grna_groups.at_scale.txt"),
col_types = "cc", col_names = c("grna_group", "barcode"))
grna_result_table <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_all_deg_results.at_scale.txt"))
# create the data frame of grna feature covariates
grna_id_to_group_df <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_grna_groups.at_scale.txt"),
col_types = "cc", col_names = c("grna_group", "barcode"))
grna_result_table <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_all_deg_results.at_scale.txt"))
grna_group_to_target_df <- grna_result_table |>
dplyr::select(grna_group = gRNA_group, target_site.chr, target_site.start, target_site.stop, target_type = site_type) |>
dplyr::distinct() |>
dplyr::mutate(target = paste0(target_site.chr, ":", target_site.start, "-", target_site.stop),
target_site.chr  = NULL, target_site.start = NULL, target_site.stop = NULL) |>
dplyr::filter(target_type != "TSS") |>
dplyr::mutate(target_type = forcats::fct_recode(target_type, gene_tss = "selfTSS",
candidate_enhancer = "DHS",
known_enhancer = "positive_ctrl",
"non-targeting" = "NTC"),
target = ifelse(target_type != "non-targeting", target, "non-targeting"))
pos_control_grna_group_to_target_gene_df <- grna_result_table |>
dplyr::filter(site_type == "selfTSS") |>
dplyr::pull(pairs4merge) |>
strsplit(":") |>
do.call(what = rbind, args = _) |>
as.data.frame() |>
setNames(c("grna_group", "target_gene"))
# perform a join operation to create a data frame with columns grna ID (barcode), target (the chromosomal position that a grna targets), target_type, pos_control_gene (for positive controls, the targeted gene), and grna_group
grna_group_tbl <- dplyr::left_join(grna_group_to_target_df, pos_control_grna_group_to_target_gene_df, by = "grna_group")
grna_feature_covariates <- dplyr::left_join(grna_id_to_group_df, grna_group_tbl,by = "grna_group")
head(grna_feature_covariates)
saveRDS(grna_feature_covariates, paste0(intermediate_data_dir, "grna_feature_covariates.rds"))
###########################
# 0. Load packages; set fps
###########################
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
processed_data_dir <- paste0(gasp_offsite, "processed/")
processed_gene_dir <- paste0(processed_data_dir, "gene/")
processed_gRNA_expression_dir <- paste0(processed_data_dir, "grna_expression/")
processed_gRNA_assignment_dir <- paste0(processed_data_dir, "grna_assignment/")
dirs_to_create <- c(processed_data_dir, processed_gene_dir,
processed_gRNA_expression_dir, processed_gRNA_assignment_dir)
for (dir in dirs_to_create) {
if (!dir.exists(dir)) dir.create(path = dir, recursive = TRUE)
}
# set raw directories
raw_data_dir <- paste0(gasp_offsite, "raw/")
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
# load packages
library(magrittr)
library(ondisc)
###########################
# 1. gene expression matrix
###########################
# gene count matrix
mtx_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.exprs.mtx")
barcodes_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.cells.txt")
gene_ids_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.genes.txt")
odm_fp <- paste0(processed_gene_dir, "matrix.odm")
metadata_fp <- paste0(processed_gene_dir, "metadata.rds")
!file.exists(odm_fp)
# create the odm
if (!file.exists(odm_fp)) {
gene_odm <- create_ondisc_matrix_from_mtx(mtx_fp = mtx_fp, barcodes_fp = barcodes_fp,
features_fp = gene_ids_fp, odm_fp = odm_fp,
metadata_fp = metadata_fp, progress = TRUE)
# Add p_mito and batch from cell_covariates data frame
gasp_cell_covariates <- readRDS(paste0(intermediate_data_dir, "cell_covariates.rds"))
gene_odm_plus_pmito_batch <- mutate_cell_covariates(gene_odm, p_mito = gasp_cell_covariates$percent.mito,
batch = factor(gasp_cell_covariates$prep_batch))
# save the metadata (overwriting the original metadata file)
save_odm(odm = gene_odm_plus_pmito_batch,
metadata_fp = metadata_fp)
} else {
gene_odm_plus_pmito_batch <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
}
###########################
# 2. gRNA expression matrix
###########################
# next, load the gRNA count matrix. Write the backing .odm file and metadata file to disk.
odm_fp <- paste0(processed_gRNA_expression_dir, "matrix.odm")
gc()
gc()
###########################
# 0. Load packages; set fps
###########################
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
processed_data_dir <- paste0(gasp_offsite, "processed/")
processed_gene_dir <- paste0(processed_data_dir, "gene/")
processed_grna_expression_dir <- paste0(processed_data_dir, "grna_expression/")
processed_grna_assignment_dir <- paste0(processed_data_dir, "grna_assignment/")
dirs_to_create <- c(processed_data_dir, processed_gene_dir,
processed_grna_expression_dir, processed_grna_assignment_dir)
for (dir in dirs_to_create) {
if (!dir.exists(dir)) dir.create(path = dir, recursive = TRUE)
}
# set raw directories
raw_data_dir <- paste0(gasp_offsite, "raw/")
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
# load packages
library(magrittr)
library(ondisc)
###########################
# 1. gene expression matrix
###########################
# gene count matrix
mtx_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.exprs.mtx")
barcodes_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.cells.txt")
gene_ids_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.genes.txt")
odm_fp <- paste0(processed_gene_dir, "matrix.odm")
metadata_fp <- paste0(processed_gene_dir, "metadata.rds")
# create the odm
if (!file.exists(odm_fp)) {
gene_odm <- create_ondisc_matrix_from_mtx(mtx_fp = mtx_fp, barcodes_fp = barcodes_fp,
features_fp = gene_ids_fp, odm_fp = odm_fp,
metadata_fp = metadata_fp, progress = TRUE)
# Add p_mito and batch from cell_covariates data frame
gasp_cell_covariates <- readRDS(paste0(intermediate_data_dir, "cell_covariates.rds"))
gene_odm_plus_pmito_batch <- mutate_cell_covariates(gene_odm, p_mito = gasp_cell_covariates$percent.mito,
batch = factor(gasp_cell_covariates$prep_batch))
# save the metadata (overwriting the original metadata file)
save_odm(odm = gene_odm_plus_pmito_batch,
metadata_fp = metadata_fp)
} else {
gene_odm_plus_pmito_batch <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
}
###########################
# 2. grna expression matrix
###########################
# next, load the grna count matrix. Write the backing .odm file and metadata file to disk.
odm_fp <- paste0(processed_grna_expression_dir, "matrix.odm")
metadata_fp <- paste0(processed_grna_expression_dir, "metadata.rds")
grna_count_matrix <- readRDS(paste0(intermediate_data_dir, "grna_count_matrix.rds"))
grna_feature_covariate_df <-  readRDS(paste0(intermediate_data_dir, "grna_feature_covariates.rds"))
# confirm that (1) cell barcodes of grna exp match those of gene odm, and (2) grna barcodes of grna exp match those of grna_feature_covariate_df
identical(get_cell_barcodes(gene_odm_plus_pmito_batch), colnames(grna_count_matrix))
identical(grna_feature_covariate_df$barcode, rownames(grna_count_matrix))
cell_barcodes <- colnames(grna_count_matrix)
features_df <- data.frame(barcode = grna_feature_covariate_df$barcode)
# create the grna odm
grna_odm_exp <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_count_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
###########################
# 2. grna expression matrix
###########################
# next, load the grna count matrix. Write the backing .odm file and metadata file to disk.
odm_fp <- paste0(processed_grna_expression_dir, "matrix.odm")
metadata_fp <- paste0(processed_grna_expression_dir, "metadata.rds")
grna_count_matrix <- readRDS(paste0(intermediate_data_dir, "grna_count_matrix.rds"))
grna_feature_covariate_df <-  readRDS(paste0(intermediate_data_dir, "grna_feature_covariates.rds"))
# confirm that (1) cell barcodes of grna exp match those of gene odm, and (2) grna barcodes of grna exp match those of grna_feature_covariate_df
identical(get_cell_barcodes(gene_odm_plus_pmito_batch), colnames(grna_count_matrix))
identical(grna_feature_covariate_df$barcode, rownames(grna_count_matrix))
cell_barcodes <- colnames(grna_count_matrix)
features_df <- data.frame(barcode = grna_feature_covariate_df$barcode)
# create the grna odm
grna_odm_exp <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_count_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
# modify the feature covariates by adding the grna covariate information
grna_feature_covariate_df <- dplyr::mutate(grna_feature_covariate_df, barcode = NULL)
grna_odm_exp_mod <- grna_odm_exp %>%
mutate_feature_covariates(coef_of_variation = NULL, grna_feature_covariate_df)
# overwrite metadata file
save_odm(grna_odm_exp_mod, metadata_fp)
############################################
# 3. grna assignment matrix (threshold at 5)
###########################################
grna_assign_matrix <- grna_count_matrix >= 5
odm_fp <- paste0(processed_grna_assignment_dir, "matrix.odm")
metadata_fp <- paste0(processed_grna_assignment_dir, "metadata.rds")
grna_odm_assign <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_assign_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
grna_odm_assign_mod <- grna_odm_assign %>%
mutate_feature_covariates(coef_of_variation = NULL, grna_feature_covariate_df)
save_odm(odm = grna_odm_assign_mod, metadata_fp = metadata_fp)
gc()
gc()
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- "gasperini"
FRAC_EXPRESSED_TRHESH <- 0.005
N_CELLS_PER_GRNA_THRESH <- 10
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- "gasperini"
FRAC_EXPRESSED_TRHESH <- 0.005
N_CELLS_PER_GRNA_THRESH <- 10
for (paper in papers) {
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
print(paste0("paper: ", paper, " dataset: ", dataset))
multimodal_metadata_fp <- paste0(paper_dir, dataset, "/multimodal_metadata.rds")
neg_control_pairs_fp <-  paste0(paper_dir, dataset, "/neg_control_pairs.rds")
if (file.exists(multimodal_metadata_fp)) file.remove(multimodal_metadata_fp)
if (file.exists(neg_control_pairs_fp)) file.remove(neg_control_pairs_fp)
mm_odm <- lowmoi::read_all_modalities(paper, dataset)
# i. perform cell qc; restrict attention to cells with at least 1 grna and 1 gene expressed
global_cell_covariates <- mm_odm |> get_cell_covariates()
ok_cells <- global_cell_covariates |> dplyr::filter(grna_assignment_n_nonzero >= 1) |> row.names()
mm_odm_sub <- mm_odm[,ok_cells]
# ii. perform feature QC
modalities <- names(mm_odm_sub@modalities)
# grna assignment modality; keep features expressed in N_CELLS_PER_GRNA_THRESH cells
grna_assign_modality <- get_modality(mm_odm_sub, "grna_assignment")
n_cells_per_grna <- grna_assign_modality |>
get_feature_covariates() |>
dplyr::pull(n_nonzero)
grna_assign_modality <- grna_assign_modality[n_cells_per_grna >= N_CELLS_PER_GRNA_THRESH,]
mm_odm_sub@modalities$grna_assignment <- grna_assign_modality
# grna expression modality: keep the same features as above
grna_expression_modality <- get_modality(mm_odm_sub, "grna_expression")
ok_grnas <- get_feature_ids(grna_assign_modality)
grna_expression_modality <- grna_expression_modality[ok_grnas,]
mm_odm_sub@modalities[["grna_expression"]] <- grna_expression_modality
# response modalities; keep features expressed in FRAC_EXPRESSED_TRHESH of cells
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
mm_odm_sub@modalities[[modality]] <- modality_odm[feats_to_keep,]
}
# iii. Write all modalities
lowmoi::save_all_modalities(multimodal_odm = mm_odm_sub, paper = paper,
dataset = dataset, metadata_file_name = "metadata_qc.rds")
# v. create a multimodal ondisc matrix free of redundancy and write
mm_odm_sub_proc <- lowmoi::process_multimodal_odm(mm_odm_sub, FALSE)
save_multimodal_odm(multimodal_odm = mm_odm_sub_proc, multimodal_metadata_fp = multimodal_metadata_fp)
# vi. write the set of negative control grna group-gene pairs
ntcs <- mm_odm_sub_proc |>
get_modality("grna_assignment") |>
ondisc::get_feature_covariates() |>
dplyr::filter(target == "non-targeting") |>
dplyr::pull(grna_group) |> unique()
gene_ids <- mm_odm_sub_proc |>
get_modality("gene") |>
ondisc::get_feature_ids()
neg_control_pairs <- expand.grid(gene_id = gene_ids, grna_group = ntcs)
saveRDS(neg_control_pairs, neg_control_pairs_fp)
}
}
###########################
# 0. Load packages; set fps
###########################
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
processed_data_dir <- paste0(gasp_offsite, "processed/")
processed_gene_dir <- paste0(processed_data_dir, "gene/")
processed_grna_expression_dir <- paste0(processed_data_dir, "grna_expression/")
processed_grna_assignment_dir <- paste0(processed_data_dir, "grna_assignment/")
dirs_to_create <- c(processed_data_dir, processed_gene_dir,
processed_grna_expression_dir, processed_grna_assignment_dir)
for (dir in dirs_to_create) {
if (!dir.exists(dir)) dir.create(path = dir, recursive = TRUE)
}
# set raw directories
raw_data_dir <- paste0(gasp_offsite, "raw/")
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
# load packages
library(magrittr)
library(ondisc)
###########################
# 1. gene expression matrix
###########################
# gene count matrix
mtx_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.exprs.mtx")
barcodes_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.cells.txt")
gene_ids_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.genes.txt")
odm_fp <- paste0(processed_gene_dir, "matrix.odm")
metadata_fp <- paste0(processed_gene_dir, "metadata.rds")
ondisc::save_odm
# create the odm
if (!file.exists(odm_fp)) {
gene_odm <- create_ondisc_matrix_from_mtx(mtx_fp = mtx_fp, barcodes_fp = barcodes_fp,
features_fp = gene_ids_fp, odm_fp = odm_fp,
metadata_fp = metadata_fp, progress = TRUE)
# Add p_mito and batch from cell_covariates data frame
gasp_cell_covariates <- readRDS(paste0(intermediate_data_dir, "cell_covariates.rds"))
gene_odm_plus_pmito_batch <- mutate_cell_covariates(gene_odm, p_mito = gasp_cell_covariates$percent.mito,
batch = factor(gasp_cell_covariates$prep_batch))
# save the metadata (overwriting the original metadata file)
save_odm(odm = gene_odm_plus_pmito_batch,
metadata_fp = metadata_fp)
} else {
gene_odm_plus_pmito_batch <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
}
gene_odm_plus_pmito_batch
gene_odm_plus_pmito_batch |> get_feature_covariates() |> head()
###########################
# 2. grna expression matrix
###########################
# next, load the grna count matrix. Write the backing .odm file and metadata file to disk.
odm_fp <- paste0(processed_grna_expression_dir, "matrix.odm")
metadata_fp <- paste0(processed_grna_expression_dir, "metadata.rds")
grna_count_matrix <- readRDS(paste0(intermediate_data_dir, "grna_count_matrix.rds"))
grna_feature_covariate_df <-  readRDS(paste0(intermediate_data_dir, "grna_feature_covariates.rds"))
# confirm that (1) cell barcodes of grna exp match those of gene odm, and (2) grna barcodes of grna exp match those of grna_feature_covariate_df
identical(get_cell_barcodes(gene_odm_plus_pmito_batch), colnames(grna_count_matrix))
identical(grna_feature_covariate_df$barcode, rownames(grna_count_matrix))
cell_barcodes <- colnames(grna_count_matrix)
features_df <- data.frame(barcode = grna_feature_covariate_df$barcode)
# create the grna odm
grna_odm_exp <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_count_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
# modify the feature covariates by adding the grna covariate information
grna_feature_covariate_df <- dplyr::mutate(grna_feature_covariate_df, barcode = NULL)
grna_odm_exp_mod <- grna_odm_exp %>%
mutate_feature_covariates(coef_of_variation = NULL, grna_feature_covariate_df)
# overwrite metadata file
save_odm(grna_odm_exp_mod, metadata_fp)
############################################
# 3. grna assignment matrix (threshold at 5)
###########################################
grna_assign_matrix <- grna_count_matrix >= 5
odm_fp <- paste0(processed_grna_assignment_dir, "matrix.odm")
metadata_fp <- paste0(processed_grna_assignment_dir, "metadata.rds")
grna_odm_assign <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_assign_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
grna_odm_assign_mod <- grna_odm_assign %>%
mutate_feature_covariates(coef_of_variation = NULL, grna_feature_covariate_df)
save_odm(odm = grna_odm_assign_mod, metadata_fp = metadata_fp)
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
raw_dir <- paste0(gasp_offsite, "raw/")
processed_dir <- paste0(gasp_offsite, "processed/")
# read gRNA-gene pairs and gRNA info
all_results <- readr::read_tsv(file = paste0(raw_dir, "GSE120861_all_deg_results.at_scale.txt"),
col_names = TRUE, col_types = "c")
pairs_to_analyze <- all_results %>%
dplyr::select(gene_id = ENSG, gRNA_group, site_type)
saveRDS(pairs_to_analyze, paste0(processed_dir, "pairs_ungrouped.rds"))
